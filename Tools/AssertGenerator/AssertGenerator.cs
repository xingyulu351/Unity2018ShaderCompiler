using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

class AssertGenerator
{
    static readonly string primitiveTypesAssertsFileName = "AssertPrimitiveTypes.cs";
    static readonly Dictionary<Type, string> primitiveTypes = new Dictionary<Type, string>()
    {
        { typeof(sbyte),    "sbyte"     },
        { typeof(byte),     "byte"      },
        { typeof(char),     "char"      },
        { typeof(short),    "short"     },
        { typeof(ushort),   "ushort"    },
        { typeof(int),      "int"       },
        { typeof(uint),     "uint"      },
        { typeof(long),     "long"      },
        { typeof(ulong),    "ulong"     },
    };

    public void Generate(string path)
    {
        if (!Directory.Exists(path))
        {
            throw new ArgumentException(string.Format($"{path} is not a valid directory"));
        }

        GeneratePrimitiveTypeAsserts(path);
    }

    void GeneratePrimitiveTypeAsserts(string path)
    {
        Console.WriteLine("Generating asserts for primitive types...");

        var builder = new StringBuilder();

        AppendClassHeader(builder);

        foreach (var type in primitiveTypes)
        {
            if (!type.Key.IsPrimitive)
            {
                throw new Exception(string.Format($"Type {type.Value} is not a primitive type"));
            }

            AppendPrimitiveAreEqual(builder, type.Value);
            AppendPrimitiveAreNotEqual(builder, type.Value);
        }

        AppendClassFooter(builder);

        var filePath = Path.Combine(path, primitiveTypesAssertsFileName);
        File.WriteAllText(filePath, builder.ToString());

        Console.WriteLine($"Asserts for primitive types generated in file {filePath}");
    }

    void AppendClassHeader(StringBuilder builder)
    {
        var template =
            $@"// This file is generated by Tools/AssertGenerator, do not manually edit this file
using System;
using System.Diagnostics;
using UnityEngine;
using UnityEngine.Assertions.Comparers;

namespace UnityEngine.Assertions
{{
    public static partial class Assert
    {{";

        builder.Append(template);
    }

    void AppendClassFooter(StringBuilder builder)
    {
        var template = $@"    }}
}}
";

        builder.Append(template);
    }

    void AppendPrimitiveAreEqual(StringBuilder builder, string typeName)
    {
        var template = $@"
        // This file is generated by Tools/AssertGenerator, do not manually edit this method
        [Conditional(UNITY_ASSERTIONS)]
        public static void AreEqual({typeName} expected, {typeName} actual)
        {{
            if (expected != actual)
                AreEqual<{typeName}>(expected, actual, null);
        }}

        // This file is generated by Tools/AssertGenerator, do not manually edit this method
        [Conditional(UNITY_ASSERTIONS)]
        public static void AreEqual({typeName} expected, {typeName} actual, string message)
        {{
            if (expected != actual)
                AreEqual<{typeName}>(expected, actual, message);
        }}
";

        builder.Append(template);
    }

    void AppendPrimitiveAreNotEqual(StringBuilder builder, string typeName)
    {
        var template = $@"
        // This file is generated by Tools/AssertGenerator, do not manually edit this method
        [Conditional(UNITY_ASSERTIONS)]
        public static void AreNotEqual({typeName} expected, {typeName} actual)
        {{
            if (expected == actual)
                AreNotEqual<{typeName}>(expected, actual, null);
        }}

        // This file is generated by Tools/AssertGenerator, do not manually edit this method
        [Conditional(UNITY_ASSERTIONS)]
        public static void AreNotEqual({typeName} expected, {typeName} actual, string message)
        {{
            if (expected == actual)
                AreNotEqual<{typeName}>(expected, actual, message);
        }}
";

        builder.Append(template);
    }
}
