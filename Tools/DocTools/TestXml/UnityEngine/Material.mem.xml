<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc version="3">
  <member name="Material" type="Class" namespace="UnityEngine">
    <section>
      <summary>The material class.</summary>
      <description>This class exposes all properties from a material, allowing you to animate them.
You can also use it to set custom shader properties that can't be accessed through
the inspector (e.g. matrices).

In order to get the material used by an object, use the [[Renderer.material]] property:
SA: [[wiki:Materials]], [[wiki:Shaders|ShaderLab documentation]].</description>
    </section>
    <member name="Material._passCount" type="Property">
      <section>
        <signature><![CDATA[passCount]]></signature>
        <summary>How many passes are in this material (RO).</summary>
        <description>This is mostly used in direct drawing code using [[GL]] class.
For example, [[wiki:comp-ImageEffects|Image Effects]] use materials for
implementing screen post-processing. For each pass in the material they activate
the pass (see ::ref::SetPass) and draw a fullscreen quad.

Here is an example of a full image effect that inverts the colors.
Add this script to the camera and see it in play mode.</description>
        <example>
          <code lang="js"><![CDATA[	private var mat : Material;

	function Start () {
		mat = new Material (
			"Shader \"Hidden/Invert\" {" +
			"SubShader {" +
			"	Pass {" +
			"		ZTest Always Cull Off ZWrite Off" +
			"		SetTexture [_RenderTex] { combine one-texture }" +
			"	}" +
			"}" +
			"}"
		);
	}

	function OnRenderImage (source : RenderTexture, dest : RenderTexture) {
		RenderTexture.active = dest;
		source.SetGlobalShaderProperty ("_RenderTex");

		GL.PushMatrix ();
		GL.LoadOrtho ();

		// for each pass in the material (one in this case)
		for (var i = 0; i < mat.passCount; ++i) {
			// activate pass
			mat.SetPass (i);
			// draw a quad
			GL.Begin( GL.QUADS );
			GL.TexCoord2( 0, 0 ); GL.Vertex3( 0, 0, 0.1 );
			GL.TexCoord2( 1, 0 ); GL.Vertex3( 1, 0, 0.1 );
			GL.TexCoord2( 1, 1 ); GL.Vertex3( 1, 1, 0.1 );
			GL.TexCoord2( 0, 1 ); GL.Vertex3( 0, 1, 0.1 );
			GL.End();
		}
		GL.PopMatrix ();
	}]]></code>
        </example>
        <description>SA: ::ref::SetPass function, [[GL]] class, [[wiki:Shaders|ShaderLab documentation]].</description>
      </section>
    </member>
  </member>
</doc>
